import sys
import time
import random

import spec_lam

class P(process, spec_lam.P):
    def setup(checker, s:set, nrequests:int):
        super().setup(s,nrequests)

    def run():
        def task():
            output('enter critical section')
            send(('enter', self, logical_clock()), to=checker)
            time.sleep(random.random())
            send(('exit', self, logical_clock()), to=checker)
            output('exit critical section')
        for i in range(nrequests):
            super().mutex(task)

        send(('done', self), to=s)
        await(each(p in s, has=received(('done', p))))
        send(('terminating',), to=checker)
        output('terminating')

    def send(m, to):
        super().send(m, to)
        super().send(('sent', m, to, logical_clock()), to= checker)

    def receive (msg= m , from_= fr):
        super().send(('rcvd', m, fr, logical_clock()), to= checker)

class Checker(process):
    def setup(ps):
        pass

    def receive(msg= _): pass

    def run():
        await(each (p in ps , has = some(received(('terminating',), from_ = _p))))
        output('~~ polling ended . checking safety : ', S1(), S2())

    def receive(msg= ('enter' | 'exit', p, ts)):
        pass

    def S1():
        """Return false if two threads were in a critical section at the same time"""
        safe = not some(
            received(('enter', _, t1)),
            received(('exit', _, t3)),
            has= not some(received(('enter', _, t2)), has= t1<t2<t3))
        return safe

    def S2():
        """Return false if one thread releases another thread's lock"""
        safe = not some(
            received(('enter', a, t1)),
            received(('exit', _a, t3)),
            has= not some(received(('exit', _, t2)), has= t1<t2<t3)
        )
        return safe


def main():
    nprocs = int(sys.argv[1]) if len(sys.argv) > 1 else 5
    nrequests = int(sys.argv[2]) if len(sys.argv) > 2 else 1

    config(channel=Fifo, clock=Lamport)

    checker = new(Checker)
    ps = new(P, num=nprocs)
    setup(checker, (ps,))
    for p in ps:
        setup(p, (checker, ps-{p}, nrequests))
    start(ps)
    start(checker)
